// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_etl.generer_calendrier_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Generer_Calendrier Purpose: Creation d'une table de date<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Generer_Calendrier implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (date_deb != null) {

				String pattern_date_deb = "yyyy-MM-dd HH:mm:ss";
				String value_date_deb = "2023-01-01 00:00:00";
				String[] parts_date_deb = value_date_deb.split(";");
				if (parts_date_deb.length > 1) {
					pattern_date_deb = parts_date_deb[0];
					this.setProperty("date_deb",
							pattern_date_deb + ";" + FormatterUtils.format_Date(date_deb, pattern_date_deb));
				} else {
					this.setProperty("date_deb", FormatterUtils.format_Date(date_deb, pattern_date_deb));
				}

			}

			if (date_fin != null) {

				String pattern_date_fin = "yyyy-MM-dd HH:mm:ss";
				String value_date_fin = "2023-12-31 23:59:59";
				String[] parts_date_fin = value_date_fin.split(";");
				if (parts_date_fin.length > 1) {
					pattern_date_fin = parts_date_fin[0];
					this.setProperty("date_fin",
							pattern_date_fin + ";" + FormatterUtils.format_Date(date_fin, pattern_date_fin));
				} else {
					this.setProperty("date_fin", FormatterUtils.format_Date(date_fin, pattern_date_fin));
				}

			}

			if (File != null) {

				this.setProperty("File", File.toString());

			}

			if (name_file != null) {

				this.setProperty("name_file", name_file.toString());

			}

			if (Date_Execution != null) {

				String pattern_Date_Execution = "yyyy-MM-dd HH:mm:ss";
				String value_Date_Execution = "2023-09-21 18:12:59";
				String[] parts_Date_Execution = value_Date_Execution.split(";");
				if (parts_Date_Execution.length > 1) {
					pattern_Date_Execution = parts_Date_Execution[0];
					this.setProperty("Date_Execution", pattern_Date_Execution + ";"
							+ FormatterUtils.format_Date(Date_Execution, pattern_Date_Execution));
				} else {
					this.setProperty("Date_Execution",
							FormatterUtils.format_Date(Date_Execution, pattern_Date_Execution));
				}

			}

			if (nbJour != null) {

				this.setProperty("nbJour", nbJour.toString());

			}

		}

		public java.util.Date date_deb;

		public java.util.Date getDate_deb() {
			return this.date_deb;
		}

		public java.util.Date date_fin;

		public java.util.Date getDate_fin() {
			return this.date_fin;
		}

		public String File;

		public String getFile() {
			return this.File;
		}

		public String name_file;

		public String getName_file() {
			return this.name_file;
		}

		public java.util.Date Date_Execution;

		public java.util.Date getDate_Execution() {
			return this.Date_Execution;
		}

		public Integer nbJour;

		public Integer getNbJour() {
			return this.nbJour;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Generer_Calendrier";
	private final String projectName = "TEST_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Generer_Calendrier.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Generer_Calendrier.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_2Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("---------------------------------------------------");
				System.out.println("fin de la generattion du calendrier"
						+ TalendDate.formatDate("dd-MM-yy HH:mm:ss", TalendDate.getCurrentDate()));
				System.out.println("temps d'execution:       "
						+ TalendDate.diffDate(TalendDate.getCurrentDate(), context.Date_Execution, "mm") + "min"
						+ TalendDate.diffDate(TalendDate.getCurrentDate(), context.Date_Execution, "ss") + "s");
				System.out.println("---------------------------------------------------");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				context.nbJour = (int) TalendDate.diffDate(context.date_fin, context.date_deb, "dd") + 1;
				context.Date_Execution = TalendDate.getCurrentDate();

				System.out.println("--------------------------------------------------------------------------");
				System.out.println("generation de la calendrier"
						+ TalendDate.formatDate("dd-MM-yyyy HH:mm:ss", context.Date_Execution));
				System.out.println("nb de jours a generer" + context.nbJour);
				System.out.println("--------------------------------------------------------------------------");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public Integer ID_Jour;

		public Integer getID_Jour() {
			return this.ID_Jour;
		}

		public java.util.Date DT_Jour;

		public java.util.Date getDT_Jour() {
			return this.DT_Jour;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public Integer Simestres;

		public Integer getSimestres() {
			return this.Simestres;
		}

		public Integer trimestres;

		public Integer getTrimestres() {
			return this.trimestres;
		}

		public Integer nb_Mois;

		public Integer getNb_Mois() {
			return this.nb_Mois;
		}

		public Integer nb_Jour_annee;

		public Integer getNb_Jour_annee() {
			return this.nb_Jour_annee;
		}

		public Integer nb_Jour_Mois;

		public Integer getNb_Jour_Mois() {
			return this.nb_Jour_Mois;
		}

		public Integer nb_Jour_semaine;

		public Integer getNb_Jour_semaine() {
			return this.nb_Jour_semaine;
		}

		public Integer nb_Semaile_Annee;

		public Integer getNb_Semaile_Annee() {
			return this.nb_Semaile_Annee;
		}

		public String LB_mois;

		public String getLB_mois() {
			return this.LB_mois;
		}

		public String LB_Jour;

		public String getLB_Jour() {
			return this.LB_Jour;
		}

		public Integer Dernier_Jour_Mois;

		public Integer getDernier_Jour_Mois() {
			return this.Dernier_Jour_Mois;
		}

		public Integer annee_bissextile366;

		public Integer getAnnee_bissextile366() {
			return this.annee_bissextile366;
		}

		public Integer wekkend;

		public Integer getWekkend() {
			return this.wekkend;
		}

		public Integer Jour_ferier;

		public Integer getJour_ferier() {
			return this.Jour_ferier;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_ETL_Generer_Calendrier.length) {
					if (length < 1024 && commonByteArray_TEST_ETL_Generer_Calendrier.length == 0) {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[1024];
					} else {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length);
				strReturn = new String(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.ID_Jour = readInteger(dis);

					this.DT_Jour = readDate(dis);

					this.Annee = readInteger(dis);

					this.Simestres = readInteger(dis);

					this.trimestres = readInteger(dis);

					this.nb_Mois = readInteger(dis);

					this.nb_Jour_annee = readInteger(dis);

					this.nb_Jour_Mois = readInteger(dis);

					this.nb_Jour_semaine = readInteger(dis);

					this.nb_Semaile_Annee = readInteger(dis);

					this.LB_mois = readString(dis);

					this.LB_Jour = readString(dis);

					this.Dernier_Jour_Mois = readInteger(dis);

					this.annee_bissextile366 = readInteger(dis);

					this.wekkend = readInteger(dis);

					this.Jour_ferier = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Jour, dos);

				// java.util.Date

				writeDate(this.DT_Jour, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// Integer

				writeInteger(this.Simestres, dos);

				// Integer

				writeInteger(this.trimestres, dos);

				// Integer

				writeInteger(this.nb_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_annee, dos);

				// Integer

				writeInteger(this.nb_Jour_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_semaine, dos);

				// Integer

				writeInteger(this.nb_Semaile_Annee, dos);

				// String

				writeString(this.LB_mois, dos);

				// String

				writeString(this.LB_Jour, dos);

				// Integer

				writeInteger(this.Dernier_Jour_Mois, dos);

				// Integer

				writeInteger(this.annee_bissextile366, dos);

				// Integer

				writeInteger(this.wekkend, dos);

				// Integer

				writeInteger(this.Jour_ferier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Jour=" + String.valueOf(ID_Jour));
			sb.append(",DT_Jour=" + String.valueOf(DT_Jour));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",Simestres=" + String.valueOf(Simestres));
			sb.append(",trimestres=" + String.valueOf(trimestres));
			sb.append(",nb_Mois=" + String.valueOf(nb_Mois));
			sb.append(",nb_Jour_annee=" + String.valueOf(nb_Jour_annee));
			sb.append(",nb_Jour_Mois=" + String.valueOf(nb_Jour_Mois));
			sb.append(",nb_Jour_semaine=" + String.valueOf(nb_Jour_semaine));
			sb.append(",nb_Semaile_Annee=" + String.valueOf(nb_Semaile_Annee));
			sb.append(",LB_mois=" + LB_mois);
			sb.append(",LB_Jour=" + LB_Jour);
			sb.append(",Dernier_Jour_Mois=" + String.valueOf(Dernier_Jour_Mois));
			sb.append(",annee_bissextile366=" + String.valueOf(annee_bissextile366));
			sb.append(",wekkend=" + String.valueOf(wekkend));
			sb.append(",Jour_ferier=" + String.valueOf(Jour_ferier));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public Integer ID_Jour;

		public Integer getID_Jour() {
			return this.ID_Jour;
		}

		public java.util.Date DT_Jour;

		public java.util.Date getDT_Jour() {
			return this.DT_Jour;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public Integer Simestres;

		public Integer getSimestres() {
			return this.Simestres;
		}

		public Integer trimestres;

		public Integer getTrimestres() {
			return this.trimestres;
		}

		public Integer nb_Mois;

		public Integer getNb_Mois() {
			return this.nb_Mois;
		}

		public Integer nb_Jour_annee;

		public Integer getNb_Jour_annee() {
			return this.nb_Jour_annee;
		}

		public Integer nb_Jour_Mois;

		public Integer getNb_Jour_Mois() {
			return this.nb_Jour_Mois;
		}

		public Integer nb_Jour_semaine;

		public Integer getNb_Jour_semaine() {
			return this.nb_Jour_semaine;
		}

		public Integer nb_Semaile_Annee;

		public Integer getNb_Semaile_Annee() {
			return this.nb_Semaile_Annee;
		}

		public String LB_mois;

		public String getLB_mois() {
			return this.LB_mois;
		}

		public String LB_Jour;

		public String getLB_Jour() {
			return this.LB_Jour;
		}

		public Integer Dernier_Jour_Mois;

		public Integer getDernier_Jour_Mois() {
			return this.Dernier_Jour_Mois;
		}

		public Integer annee_bissextile366;

		public Integer getAnnee_bissextile366() {
			return this.annee_bissextile366;
		}

		public Integer wekkend;

		public Integer getWekkend() {
			return this.wekkend;
		}

		public Integer Jour_ferier;

		public Integer getJour_ferier() {
			return this.Jour_ferier;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_ETL_Generer_Calendrier.length) {
					if (length < 1024 && commonByteArray_TEST_ETL_Generer_Calendrier.length == 0) {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[1024];
					} else {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length);
				strReturn = new String(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.ID_Jour = readInteger(dis);

					this.DT_Jour = readDate(dis);

					this.Annee = readInteger(dis);

					this.Simestres = readInteger(dis);

					this.trimestres = readInteger(dis);

					this.nb_Mois = readInteger(dis);

					this.nb_Jour_annee = readInteger(dis);

					this.nb_Jour_Mois = readInteger(dis);

					this.nb_Jour_semaine = readInteger(dis);

					this.nb_Semaile_Annee = readInteger(dis);

					this.LB_mois = readString(dis);

					this.LB_Jour = readString(dis);

					this.Dernier_Jour_Mois = readInteger(dis);

					this.annee_bissextile366 = readInteger(dis);

					this.wekkend = readInteger(dis);

					this.Jour_ferier = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Jour, dos);

				// java.util.Date

				writeDate(this.DT_Jour, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// Integer

				writeInteger(this.Simestres, dos);

				// Integer

				writeInteger(this.trimestres, dos);

				// Integer

				writeInteger(this.nb_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_annee, dos);

				// Integer

				writeInteger(this.nb_Jour_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_semaine, dos);

				// Integer

				writeInteger(this.nb_Semaile_Annee, dos);

				// String

				writeString(this.LB_mois, dos);

				// String

				writeString(this.LB_Jour, dos);

				// Integer

				writeInteger(this.Dernier_Jour_Mois, dos);

				// Integer

				writeInteger(this.annee_bissextile366, dos);

				// Integer

				writeInteger(this.wekkend, dos);

				// Integer

				writeInteger(this.Jour_ferier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Jour=" + String.valueOf(ID_Jour));
			sb.append(",DT_Jour=" + String.valueOf(DT_Jour));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",Simestres=" + String.valueOf(Simestres));
			sb.append(",trimestres=" + String.valueOf(trimestres));
			sb.append(",nb_Mois=" + String.valueOf(nb_Mois));
			sb.append(",nb_Jour_annee=" + String.valueOf(nb_Jour_annee));
			sb.append(",nb_Jour_Mois=" + String.valueOf(nb_Jour_Mois));
			sb.append(",nb_Jour_semaine=" + String.valueOf(nb_Jour_semaine));
			sb.append(",nb_Semaile_Annee=" + String.valueOf(nb_Semaile_Annee));
			sb.append(",LB_mois=" + LB_mois);
			sb.append(",LB_Jour=" + LB_Jour);
			sb.append(",Dernier_Jour_Mois=" + String.valueOf(Dernier_Jour_Mois));
			sb.append(",annee_bissextile366=" + String.valueOf(annee_bissextile366));
			sb.append(",wekkend=" + String.valueOf(wekkend));
			sb.append(",Jour_ferier=" + String.valueOf(Jour_ferier));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public Integer ID_Jour;

		public Integer getID_Jour() {
			return this.ID_Jour;
		}

		public java.util.Date DT_Jour;

		public java.util.Date getDT_Jour() {
			return this.DT_Jour;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public Integer Simestres;

		public Integer getSimestres() {
			return this.Simestres;
		}

		public Integer trimestres;

		public Integer getTrimestres() {
			return this.trimestres;
		}

		public Integer nb_Mois;

		public Integer getNb_Mois() {
			return this.nb_Mois;
		}

		public Integer nb_Jour_annee;

		public Integer getNb_Jour_annee() {
			return this.nb_Jour_annee;
		}

		public Integer nb_Jour_Mois;

		public Integer getNb_Jour_Mois() {
			return this.nb_Jour_Mois;
		}

		public Integer nb_Jour_semaine;

		public Integer getNb_Jour_semaine() {
			return this.nb_Jour_semaine;
		}

		public Integer nb_Semaile_Annee;

		public Integer getNb_Semaile_Annee() {
			return this.nb_Semaile_Annee;
		}

		public String LB_mois;

		public String getLB_mois() {
			return this.LB_mois;
		}

		public String LB_Jour;

		public String getLB_Jour() {
			return this.LB_Jour;
		}

		public Integer Dernier_Jour_Mois;

		public Integer getDernier_Jour_Mois() {
			return this.Dernier_Jour_Mois;
		}

		public Integer annee_bissextile366;

		public Integer getAnnee_bissextile366() {
			return this.annee_bissextile366;
		}

		public Integer wekkend;

		public Integer getWekkend() {
			return this.wekkend;
		}

		public Integer Jour_ferier;

		public Integer getJour_ferier() {
			return this.Jour_ferier;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_ETL_Generer_Calendrier.length) {
					if (length < 1024 && commonByteArray_TEST_ETL_Generer_Calendrier.length == 0) {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[1024];
					} else {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length);
				strReturn = new String(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.ID_Jour = readInteger(dis);

					this.DT_Jour = readDate(dis);

					this.Annee = readInteger(dis);

					this.Simestres = readInteger(dis);

					this.trimestres = readInteger(dis);

					this.nb_Mois = readInteger(dis);

					this.nb_Jour_annee = readInteger(dis);

					this.nb_Jour_Mois = readInteger(dis);

					this.nb_Jour_semaine = readInteger(dis);

					this.nb_Semaile_Annee = readInteger(dis);

					this.LB_mois = readString(dis);

					this.LB_Jour = readString(dis);

					this.Dernier_Jour_Mois = readInteger(dis);

					this.annee_bissextile366 = readInteger(dis);

					this.wekkend = readInteger(dis);

					this.Jour_ferier = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Jour, dos);

				// java.util.Date

				writeDate(this.DT_Jour, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// Integer

				writeInteger(this.Simestres, dos);

				// Integer

				writeInteger(this.trimestres, dos);

				// Integer

				writeInteger(this.nb_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_annee, dos);

				// Integer

				writeInteger(this.nb_Jour_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_semaine, dos);

				// Integer

				writeInteger(this.nb_Semaile_Annee, dos);

				// String

				writeString(this.LB_mois, dos);

				// String

				writeString(this.LB_Jour, dos);

				// Integer

				writeInteger(this.Dernier_Jour_Mois, dos);

				// Integer

				writeInteger(this.annee_bissextile366, dos);

				// Integer

				writeInteger(this.wekkend, dos);

				// Integer

				writeInteger(this.Jour_ferier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Jour=" + String.valueOf(ID_Jour));
			sb.append(",DT_Jour=" + String.valueOf(DT_Jour));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",Simestres=" + String.valueOf(Simestres));
			sb.append(",trimestres=" + String.valueOf(trimestres));
			sb.append(",nb_Mois=" + String.valueOf(nb_Mois));
			sb.append(",nb_Jour_annee=" + String.valueOf(nb_Jour_annee));
			sb.append(",nb_Jour_Mois=" + String.valueOf(nb_Jour_Mois));
			sb.append(",nb_Jour_semaine=" + String.valueOf(nb_Jour_semaine));
			sb.append(",nb_Semaile_Annee=" + String.valueOf(nb_Semaile_Annee));
			sb.append(",LB_mois=" + LB_mois);
			sb.append(",LB_Jour=" + LB_Jour);
			sb.append(",Dernier_Jour_Mois=" + String.valueOf(Dernier_Jour_Mois));
			sb.append(",annee_bissextile366=" + String.valueOf(annee_bissextile366));
			sb.append(",wekkend=" + String.valueOf(wekkend));
			sb.append(",Jour_ferier=" + String.valueOf(Jour_ferier));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public Integer ID_Jour;

		public Integer getID_Jour() {
			return this.ID_Jour;
		}

		public java.util.Date DT_Jour;

		public java.util.Date getDT_Jour() {
			return this.DT_Jour;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public Integer Simestres;

		public Integer getSimestres() {
			return this.Simestres;
		}

		public Integer trimestres;

		public Integer getTrimestres() {
			return this.trimestres;
		}

		public Integer nb_Mois;

		public Integer getNb_Mois() {
			return this.nb_Mois;
		}

		public Integer nb_Jour_annee;

		public Integer getNb_Jour_annee() {
			return this.nb_Jour_annee;
		}

		public Integer nb_Jour_Mois;

		public Integer getNb_Jour_Mois() {
			return this.nb_Jour_Mois;
		}

		public Integer nb_Jour_semaine;

		public Integer getNb_Jour_semaine() {
			return this.nb_Jour_semaine;
		}

		public Integer nb_Semaile_Annee;

		public Integer getNb_Semaile_Annee() {
			return this.nb_Semaile_Annee;
		}

		public String LB_mois;

		public String getLB_mois() {
			return this.LB_mois;
		}

		public String LB_Jour;

		public String getLB_Jour() {
			return this.LB_Jour;
		}

		public Integer Dernier_Jour_Mois;

		public Integer getDernier_Jour_Mois() {
			return this.Dernier_Jour_Mois;
		}

		public Integer annee_bissextile366;

		public Integer getAnnee_bissextile366() {
			return this.annee_bissextile366;
		}

		public Integer wekkend;

		public Integer getWekkend() {
			return this.wekkend;
		}

		public Integer Jour_ferier;

		public Integer getJour_ferier() {
			return this.Jour_ferier;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_ETL_Generer_Calendrier.length) {
					if (length < 1024 && commonByteArray_TEST_ETL_Generer_Calendrier.length == 0) {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[1024];
					} else {
						commonByteArray_TEST_ETL_Generer_Calendrier = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length);
				strReturn = new String(commonByteArray_TEST_ETL_Generer_Calendrier, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.ID_Jour = readInteger(dis);

					this.DT_Jour = readDate(dis);

					this.Annee = readInteger(dis);

					this.Simestres = readInteger(dis);

					this.trimestres = readInteger(dis);

					this.nb_Mois = readInteger(dis);

					this.nb_Jour_annee = readInteger(dis);

					this.nb_Jour_Mois = readInteger(dis);

					this.nb_Jour_semaine = readInteger(dis);

					this.nb_Semaile_Annee = readInteger(dis);

					this.LB_mois = readString(dis);

					this.LB_Jour = readString(dis);

					this.Dernier_Jour_Mois = readInteger(dis);

					this.annee_bissextile366 = readInteger(dis);

					this.wekkend = readInteger(dis);

					this.Jour_ferier = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Jour, dos);

				// java.util.Date

				writeDate(this.DT_Jour, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// Integer

				writeInteger(this.Simestres, dos);

				// Integer

				writeInteger(this.trimestres, dos);

				// Integer

				writeInteger(this.nb_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_annee, dos);

				// Integer

				writeInteger(this.nb_Jour_Mois, dos);

				// Integer

				writeInteger(this.nb_Jour_semaine, dos);

				// Integer

				writeInteger(this.nb_Semaile_Annee, dos);

				// String

				writeString(this.LB_mois, dos);

				// String

				writeString(this.LB_Jour, dos);

				// Integer

				writeInteger(this.Dernier_Jour_Mois, dos);

				// Integer

				writeInteger(this.annee_bissextile366, dos);

				// Integer

				writeInteger(this.wekkend, dos);

				// Integer

				writeInteger(this.Jour_ferier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Jour=" + String.valueOf(ID_Jour));
			sb.append(",DT_Jour=" + String.valueOf(DT_Jour));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",Simestres=" + String.valueOf(Simestres));
			sb.append(",trimestres=" + String.valueOf(trimestres));
			sb.append(",nb_Mois=" + String.valueOf(nb_Mois));
			sb.append(",nb_Jour_annee=" + String.valueOf(nb_Jour_annee));
			sb.append(",nb_Jour_Mois=" + String.valueOf(nb_Jour_Mois));
			sb.append(",nb_Jour_semaine=" + String.valueOf(nb_Jour_semaine));
			sb.append(",nb_Semaile_Annee=" + String.valueOf(nb_Semaile_Annee));
			sb.append(",LB_mois=" + LB_mois);
			sb.append(",LB_Jour=" + LB_Jour);
			sb.append(",Dernier_Jour_Mois=" + String.valueOf(Dernier_Jour_Mois));
			sb.append(",annee_bissextile366=" + String.valueOf(annee_bissextile366));
			sb.append(",wekkend=" + String.valueOf(wekkend));
			sb.append(",Jour_ferier=" + String.valueOf(Jour_ferier));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public java.util.Date dtjour;

		public java.util.Date getDtjour() {
			return this.dtjour;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.dtjour = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.dtjour, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dtjour=" + String.valueOf(dtjour));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_ETL_Generer_Calendrier = new byte[0];
		static byte[] commonByteArray_TEST_ETL_Generer_Calendrier = new byte[0];

		public Integer Num_lignes;

		public Integer getNum_lignes() {
			return this.Num_lignes;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_ETL_Generer_Calendrier) {

				try {

					int length = 0;

					this.Num_lignes = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_lignes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_lignes=" + String.valueOf(Num_lignes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out2Struct out2 = new out2Struct();
				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[16];

					public void addRow(String[] row) {

						for (int i = 0; i < 16; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 15 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "ID_Jour", "DT_Jour", "Annee", "Simestres", "trimestres",
						"nb_Mois", "nb_Jour_annee", "nb_Jour_Mois", "nb_Jour_semaine", "nb_Semaile_Annee", "LB_mois",
						"LB_Jour", "Dernier_Jour_Mois", "annee_bissextile366", "wekkend", "Jour_ferier", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFileOutputExcel_2 = 0;

				int columnIndex_tFileOutputExcel_2 = 0;

				int nb_line_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = context.File + context.name_file;
				java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
				boolean isFileGenerated_tFileOutputExcel_2 = true;
//create directory only if not exists		  
				java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
				if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {

					parentFile_tFileOutputExcel_2.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)),
						true, workbookSettings_tFileOutputExcel_2);

				writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_2 == null) {
					writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet1",
							writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_2 = new int[16];
				for (int i_tFileOutputExcel_2 = 0; i_tFileOutputExcel_2 < 16; i_tFileOutputExcel_2++) {
					int fitCellViewSize_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
							.getColumnView(i_tFileOutputExcel_2).getSize();
					fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] = fitCellViewSize_tFileOutputExcel_2 / 256;
					if (fitCellViewSize_tFileOutputExcel_2 % 256 != 0) {
						fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] += 1;
					}
				}

				final jxl.write.WritableCellFormat cell_format_DT_Jour_tFileOutputExcel_2 = new jxl.write.WritableCellFormat(
						new jxl.write.DateFormat("yyyy-MM-dd"));

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Calendrier_Complexe");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Calendrier_Complexe");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Netflix";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:pxDz00ghTn8mTinY93uLmXtb6THXgyfV8RPnsh0nqKMigeW24cQX4g==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(("Calendrier_Complexe"))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
								+ "\"(\"ID_Jour\" INT4 ,\"DT_Jour\" DATE ,\"Annee\" INT4 ,\"Simestres\" INT4 ,\"trimestres\" INT4 ,\"nb_Mois\" INT4 ,\"nb_Jour_annee\" INT4 ,\"nb_Jour_Mois\" INT4 ,\"nb_Jour_semaine\" INT4 ,\"nb_Semaile_Annee\" INT4 ,\"LB_mois\" VARCHAR ,\"LB_Jour\" VARCHAR ,\"Dernier_Jour_Mois\" INT4 ,\"annee_bissextile366\" INT4 ,\"wekkend\" INT4 ,\"Jour_ferier\" INT4 )");
					}
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID_Jour\",\"DT_Jour\",\"Annee\",\"Simestres\",\"trimestres\",\"nb_Mois\",\"nb_Jour_annee\",\"nb_Jour_Mois\",\"nb_Jour_semaine\",\"nb_Semaile_Annee\",\"LB_mois\",\"LB_Jour\",\"Dernier_Jour_Mois\",\"annee_bissextile366\",\"wekkend\",\"Jour_ferier\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = context.nbJour;

				class tRowGenerator_1Randomizer {
					public Integer getRandomNum_lignes() {

						return Numeric.sequence("s1", 0, 1);

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row1.Num_lignes = randtRowGenerator_1.getRandomNum_lignes();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_begin ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

// # Output table : 'out1'
						out1_tmp.dtjour = TalendDate.addDate(context.date_deb, row1.Num_lignes, "dd");
						out1 = out1_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							out2 = null;

// # Output table : 'out2'
							out2_tmp.ID_Jour = Integer.parseInt(TalendDate.formatDate("YYYYMMDD", out1.dtjour));
							out2_tmp.DT_Jour = out1.dtjour;
							out2_tmp.Annee = TalendDate.getPartOfDate("YEAR", out1.dtjour);
							out2_tmp.Simestres = TalendDate.getPartOfDate("MONTH", out1.dtjour) < 6 ? 1 : 2;
							out2_tmp.trimestres = TalendDate.getPartOfDate("MONTH", out1.dtjour) < 3 ? 1
									: TalendDate.getPartOfDate("MONTH", out1.dtjour) < 6 ? 2
											: TalendDate.getPartOfDate("MONTH", out1.dtjour) < 9 ? 3 : 4;
							out2_tmp.nb_Mois = TalendDate.getPartOfDate("MONTH", out1.dtjour) + 1;
							out2_tmp.nb_Jour_annee = TalendDate.getPartOfDate("DAY_OF_YEAR", out1.dtjour);
							out2_tmp.nb_Jour_Mois = TalendDate.getPartOfDate("DAY_OF_MONTH", out1.dtjour);
							out2_tmp.nb_Jour_semaine = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) - 1 == 0 ? 7
									: TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) - 1;
							out2_tmp.nb_Semaile_Annee = TalendDate.getPartOfDate("WEEK_OF_YEAR", out1.dtjour);
							out2_tmp.LB_mois = TalendDate.formatDate("MMMM", out1.dtjour).substring(0, 1).toUpperCase()
									+ TalendDate.formatDate("MMMM", out1.dtjour).substring(1,
											TalendDate.formatDate("MMMM", out1.dtjour).length());
							out2_tmp.LB_Jour = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 2 ? "Lindi"
									: TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 3 ? "Mardi"
											: TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 4 ? "Mercredi"
													: TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 5
															? "Jeudi"
															: TalendDate.getPartOfDate("DAY_OF_WEEK",
																	out1.dtjour) == 6
																			? "Vendredi"
																			: TalendDate.getPartOfDate("DAY_OF_WEEK",
																					out1.dtjour) == 7 ? "Samedi"
																							: "Dimanche";
							out2_tmp.Dernier_Jour_Mois = TalendDate.compareDate(
									TalendDate.getLastDayOfMonth(out1.dtjour), out1.dtjour, "YYYY-MM-DD") == 0 ? 1 : 0;
							out2_tmp.annee_bissextile366 = ((double) TalendDate.getPartOfDate("YEAR", out1.dtjour)
									/ 4) == Math.floor(TalendDate.getPartOfDate("YEAR", out1.dtjour) / 4) ? 1 : 0;
							out2_tmp.wekkend = TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 7
									|| TalendDate.getPartOfDate("DAY_OF_WEEK", out1.dtjour) == 1 ? 1 : 0;
							out2_tmp.Jour_ferier = 0;
							out2 = out2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "out2"
						if (out2 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out2");
							}

							row2 = new row2Struct();

							row2.ID_Jour = out2.ID_Jour;
							row2.DT_Jour = out2.DT_Jour;
							row2.Annee = out2.Annee;
							row2.Simestres = out2.Simestres;
							row2.trimestres = out2.trimestres;
							row2.nb_Mois = out2.nb_Mois;
							row2.nb_Jour_annee = out2.nb_Jour_annee;
							row2.nb_Jour_Mois = out2.nb_Jour_Mois;
							row2.nb_Jour_semaine = out2.nb_Jour_semaine;
							row2.nb_Semaile_Annee = out2.nb_Semaile_Annee;
							row2.LB_mois = out2.LB_mois;
							row2.LB_Jour = out2.LB_Jour;
							row2.Dernier_Jour_Mois = out2.Dernier_Jour_Mois;
							row2.annee_bissextile366 = out2.annee_bissextile366;
							row2.wekkend = out2.wekkend;
							row2.Jour_ferier = out2.Jour_ferier;
							row4 = new row4Struct();

							row4.ID_Jour = out2.ID_Jour;
							row4.DT_Jour = out2.DT_Jour;
							row4.Annee = out2.Annee;
							row4.Simestres = out2.Simestres;
							row4.trimestres = out2.trimestres;
							row4.nb_Mois = out2.nb_Mois;
							row4.nb_Jour_annee = out2.nb_Jour_annee;
							row4.nb_Jour_Mois = out2.nb_Jour_Mois;
							row4.nb_Jour_semaine = out2.nb_Jour_semaine;
							row4.nb_Semaile_Annee = out2.nb_Semaile_Annee;
							row4.LB_mois = out2.LB_mois;
							row4.LB_Jour = out2.LB_Jour;
							row4.Dernier_Jour_Mois = out2.Dernier_Jour_Mois;
							row4.annee_bissextile366 = out2.annee_bissextile366;
							row4.wekkend = out2.wekkend;
							row4.Jour_ferier = out2.Jour_ferier;
							row3 = new row3Struct();

							row3.ID_Jour = out2.ID_Jour;
							row3.DT_Jour = out2.DT_Jour;
							row3.Annee = out2.Annee;
							row3.Simestres = out2.Simestres;
							row3.trimestres = out2.trimestres;
							row3.nb_Mois = out2.nb_Mois;
							row3.nb_Jour_annee = out2.nb_Jour_annee;
							row3.nb_Jour_Mois = out2.nb_Jour_Mois;
							row3.nb_Jour_semaine = out2.nb_Jour_semaine;
							row3.nb_Semaile_Annee = out2.nb_Semaile_Annee;
							row3.LB_mois = out2.LB_mois;
							row3.LB_Jour = out2.LB_Jour;
							row3.Dernier_Jour_Mois = out2.Dernier_Jour_Mois;
							row3.annee_bissextile366 = out2.annee_bissextile366;
							row3.wekkend = out2.wekkend;
							row3.Jour_ferier = out2.Jour_ferier;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tReplicate_1 process_data_begin ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[16];

							if (row2.ID_Jour != null) { //
								row_tLogRow_1[0] = String.valueOf(row2.ID_Jour);

							} //

							if (row2.DT_Jour != null) { //
								row_tLogRow_1[1] = FormatterUtils.format_Date(row2.DT_Jour, "yyyy-MM-dd");

							} //

							if (row2.Annee != null) { //
								row_tLogRow_1[2] = String.valueOf(row2.Annee);

							} //

							if (row2.Simestres != null) { //
								row_tLogRow_1[3] = String.valueOf(row2.Simestres);

							} //

							if (row2.trimestres != null) { //
								row_tLogRow_1[4] = String.valueOf(row2.trimestres);

							} //

							if (row2.nb_Mois != null) { //
								row_tLogRow_1[5] = String.valueOf(row2.nb_Mois);

							} //

							if (row2.nb_Jour_annee != null) { //
								row_tLogRow_1[6] = String.valueOf(row2.nb_Jour_annee);

							} //

							if (row2.nb_Jour_Mois != null) { //
								row_tLogRow_1[7] = String.valueOf(row2.nb_Jour_Mois);

							} //

							if (row2.nb_Jour_semaine != null) { //
								row_tLogRow_1[8] = String.valueOf(row2.nb_Jour_semaine);

							} //

							if (row2.nb_Semaile_Annee != null) { //
								row_tLogRow_1[9] = String.valueOf(row2.nb_Semaile_Annee);

							} //

							if (row2.LB_mois != null) { //
								row_tLogRow_1[10] = String.valueOf(row2.LB_mois);

							} //

							if (row2.LB_Jour != null) { //
								row_tLogRow_1[11] = String.valueOf(row2.LB_Jour);

							} //

							if (row2.Dernier_Jour_Mois != null) { //
								row_tLogRow_1[12] = String.valueOf(row2.Dernier_Jour_Mois);

							} //

							if (row2.annee_bissextile366 != null) { //
								row_tLogRow_1[13] = String.valueOf(row2.annee_bissextile366);

							} //

							if (row2.wekkend != null) { //
								row_tLogRow_1[14] = String.valueOf(row2.wekkend);

							} //

							if (row2.Jour_ferier != null) { //
								row_tLogRow_1[15] = String.valueOf(row2.Jour_ferier);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

							/**
							 * [tFileOutputExcel_2 main ] start
							 */

							currentComponent = "tFileOutputExcel_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							if (row4.ID_Jour != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 0;

								jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.ID_Jour);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
								int currentWith_0_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_0_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_0_tFileOutputExcel_2 = currentWith_0_tFileOutputExcel_2 > 10 ? 10
										: currentWith_0_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > currentWith_0_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[0]
										: currentWith_0_tFileOutputExcel_2 + 2;
							}

							if (row4.DT_Jour != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 1;

								jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.DateTime(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.DT_Jour, cell_format_DT_Jour_tFileOutputExcel_2);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
								int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim()
										.length();
								currentWith_1_tFileOutputExcel_2 = 12;
								fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > currentWith_1_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[1]
										: currentWith_1_tFileOutputExcel_2 + 2;
							}

							if (row4.Annee != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 2;

								jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.Annee);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
								int currentWith_2_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_2_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_2_tFileOutputExcel_2 = currentWith_2_tFileOutputExcel_2 > 10 ? 10
										: currentWith_2_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > currentWith_2_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[2]
										: currentWith_2_tFileOutputExcel_2 + 2;
							}

							if (row4.Simestres != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 3;

								jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.Simestres);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_3_tFileOutputExcel_2);
								int currentWith_3_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_3_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_3_tFileOutputExcel_2 = currentWith_3_tFileOutputExcel_2 > 10 ? 10
										: currentWith_3_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[3] = fitWidth_tFileOutputExcel_2[3] > currentWith_3_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[3]
										: currentWith_3_tFileOutputExcel_2 + 2;
							}

							if (row4.trimestres != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 4;

								jxl.write.WritableCell cell_4_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.trimestres);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_4_tFileOutputExcel_2);
								int currentWith_4_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_4_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_4_tFileOutputExcel_2 = currentWith_4_tFileOutputExcel_2 > 10 ? 10
										: currentWith_4_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[4] = fitWidth_tFileOutputExcel_2[4] > currentWith_4_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[4]
										: currentWith_4_tFileOutputExcel_2 + 2;
							}

							if (row4.nb_Mois != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 5;

								jxl.write.WritableCell cell_5_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.nb_Mois);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_5_tFileOutputExcel_2);
								int currentWith_5_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_5_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_5_tFileOutputExcel_2 = currentWith_5_tFileOutputExcel_2 > 10 ? 10
										: currentWith_5_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[5] = fitWidth_tFileOutputExcel_2[5] > currentWith_5_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[5]
										: currentWith_5_tFileOutputExcel_2 + 2;
							}

							if (row4.nb_Jour_annee != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 6;

								jxl.write.WritableCell cell_6_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.nb_Jour_annee);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_6_tFileOutputExcel_2);
								int currentWith_6_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_6_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_6_tFileOutputExcel_2 = currentWith_6_tFileOutputExcel_2 > 10 ? 10
										: currentWith_6_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[6] = fitWidth_tFileOutputExcel_2[6] > currentWith_6_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[6]
										: currentWith_6_tFileOutputExcel_2 + 2;
							}

							if (row4.nb_Jour_Mois != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 7;

								jxl.write.WritableCell cell_7_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.nb_Jour_Mois);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_7_tFileOutputExcel_2);
								int currentWith_7_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_7_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_7_tFileOutputExcel_2 = currentWith_7_tFileOutputExcel_2 > 10 ? 10
										: currentWith_7_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[7] = fitWidth_tFileOutputExcel_2[7] > currentWith_7_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[7]
										: currentWith_7_tFileOutputExcel_2 + 2;
							}

							if (row4.nb_Jour_semaine != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 8;

								jxl.write.WritableCell cell_8_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.nb_Jour_semaine);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_8_tFileOutputExcel_2);
								int currentWith_8_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_8_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_8_tFileOutputExcel_2 = currentWith_8_tFileOutputExcel_2 > 10 ? 10
										: currentWith_8_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[8] = fitWidth_tFileOutputExcel_2[8] > currentWith_8_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[8]
										: currentWith_8_tFileOutputExcel_2 + 2;
							}

							if (row4.nb_Semaile_Annee != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 9;

								jxl.write.WritableCell cell_9_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.nb_Semaile_Annee);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_9_tFileOutputExcel_2);
								int currentWith_9_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_9_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_9_tFileOutputExcel_2 = currentWith_9_tFileOutputExcel_2 > 10 ? 10
										: currentWith_9_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[9] = fitWidth_tFileOutputExcel_2[9] > currentWith_9_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[9]
										: currentWith_9_tFileOutputExcel_2 + 2;
							}

							if (row4.LB_mois != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 10;

								jxl.write.WritableCell cell_10_tFileOutputExcel_2 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.LB_mois);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_10_tFileOutputExcel_2);
								int currentWith_10_tFileOutputExcel_2 = cell_10_tFileOutputExcel_2.getContents().trim()
										.length();
								fitWidth_tFileOutputExcel_2[10] = fitWidth_tFileOutputExcel_2[10] > currentWith_10_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[10]
										: currentWith_10_tFileOutputExcel_2 + 2;
							}

							if (row4.LB_Jour != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 11;

								jxl.write.WritableCell cell_11_tFileOutputExcel_2 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.LB_Jour);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_11_tFileOutputExcel_2);
								int currentWith_11_tFileOutputExcel_2 = cell_11_tFileOutputExcel_2.getContents().trim()
										.length();
								fitWidth_tFileOutputExcel_2[11] = fitWidth_tFileOutputExcel_2[11] > currentWith_11_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[11]
										: currentWith_11_tFileOutputExcel_2 + 2;
							}

							if (row4.Dernier_Jour_Mois != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 12;

								jxl.write.WritableCell cell_12_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.Dernier_Jour_Mois);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_12_tFileOutputExcel_2);
								int currentWith_12_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_12_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_12_tFileOutputExcel_2 = currentWith_12_tFileOutputExcel_2 > 10 ? 10
										: currentWith_12_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[12] = fitWidth_tFileOutputExcel_2[12] > currentWith_12_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[12]
										: currentWith_12_tFileOutputExcel_2 + 2;
							}

							if (row4.annee_bissextile366 != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 13;

								jxl.write.WritableCell cell_13_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.annee_bissextile366);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_13_tFileOutputExcel_2);
								int currentWith_13_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_13_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_13_tFileOutputExcel_2 = currentWith_13_tFileOutputExcel_2 > 10 ? 10
										: currentWith_13_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[13] = fitWidth_tFileOutputExcel_2[13] > currentWith_13_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[13]
										: currentWith_13_tFileOutputExcel_2 + 2;
							}

							if (row4.wekkend != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 14;

								jxl.write.WritableCell cell_14_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.wekkend);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_14_tFileOutputExcel_2);
								int currentWith_14_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_14_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_14_tFileOutputExcel_2 = currentWith_14_tFileOutputExcel_2 > 10 ? 10
										: currentWith_14_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[14] = fitWidth_tFileOutputExcel_2[14] > currentWith_14_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[14]
										: currentWith_14_tFileOutputExcel_2 + 2;
							}

							if (row4.Jour_ferier != null) {

//modif start

								columnIndex_tFileOutputExcel_2 = 15;

								jxl.write.WritableCell cell_15_tFileOutputExcel_2 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_2,
										startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
										row4.Jour_ferier);
//modif start					
								// If we keep the cell format from the existing cell in sheet

//modif ends							
								writableSheet_tFileOutputExcel_2.addCell(cell_15_tFileOutputExcel_2);
								int currentWith_15_tFileOutputExcel_2 = String
										.valueOf(((jxl.write.Number) cell_15_tFileOutputExcel_2).getValue()).trim()
										.length();
								currentWith_15_tFileOutputExcel_2 = currentWith_15_tFileOutputExcel_2 > 10 ? 10
										: currentWith_15_tFileOutputExcel_2;
								fitWidth_tFileOutputExcel_2[15] = fitWidth_tFileOutputExcel_2[15] > currentWith_15_tFileOutputExcel_2
										? fitWidth_tFileOutputExcel_2[15]
										: currentWith_15_tFileOutputExcel_2 + 2;
							}

							nb_line_tFileOutputExcel_2++;

							tos_count_tFileOutputExcel_2++;

							/**
							 * [tFileOutputExcel_2 main ] stop
							 */

							/**
							 * [tFileOutputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileOutputExcel_2";

							/**
							 * [tFileOutputExcel_2 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileOutputExcel_2";

							/**
							 * [tFileOutputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							whetherReject_tDBOutput_1 = false;
							if (row3.ID_Jour == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(1, row3.ID_Jour);
							}

							if (row3.DT_Jour != null) {
								pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(row3.DT_Jour.getTime()));
							} else {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
							}

							if (row3.Annee == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(3, row3.Annee);
							}

							if (row3.Simestres == null) {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(4, row3.Simestres);
							}

							if (row3.trimestres == null) {
								pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(5, row3.trimestres);
							}

							if (row3.nb_Mois == null) {
								pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(6, row3.nb_Mois);
							}

							if (row3.nb_Jour_annee == null) {
								pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(7, row3.nb_Jour_annee);
							}

							if (row3.nb_Jour_Mois == null) {
								pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(8, row3.nb_Jour_Mois);
							}

							if (row3.nb_Jour_semaine == null) {
								pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(9, row3.nb_Jour_semaine);
							}

							if (row3.nb_Semaile_Annee == null) {
								pstmt_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(10, row3.nb_Semaile_Annee);
							}

							if (row3.LB_mois == null) {
								pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(11, row3.LB_mois);
							}

							if (row3.LB_Jour == null) {
								pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(12, row3.LB_Jour);
							}

							if (row3.Dernier_Jour_Mois == null) {
								pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(13, row3.Dernier_Jour_Mois);
							}

							if (row3.annee_bissextile366 == null) {
								pstmt_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(14, row3.annee_bissextile366);
							}

							if (row3.wekkend == null) {
								pstmt_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(15, row3.wekkend);
							}

							if (row3.Jour_ferier == null) {
								pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(16, row3.Jour_ferier);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;

							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err.println(errormessage_tDBOutput_1);

								}
							}

							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}
								conn_tDBOutput_1.commit();

								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

							/**
							 * [tReplicate_1 process_data_end ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_end ] stop
							 */

						} // End of branch "out2"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_end ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE", nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				writeableWorkbook_tFileOutputExcel_2.write();
				writeableWorkbook_tFileOutputExcel_2.close();

				globalMap.put("tFileOutputExcel_2_NB_LINE", nb_line_tFileOutputExcel_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Generer_Calendrier Generer_CalendrierClass = new Generer_Calendrier();

		int exitCode = Generer_CalendrierClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Generer_Calendrier.class.getClassLoader()
					.getResourceAsStream("test_etl/generer_calendrier_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Generer_Calendrier.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("date_deb", "id_Date");
					try {
						String context_date_deb_value = context.getProperty("date_deb");
						if (context_date_deb_value == null) {
							context_date_deb_value = "";
						}
						int context_date_deb_pos = context_date_deb_value.indexOf(";");
						String context_date_deb_pattern = "yyyy-MM-dd HH:mm:ss";
						if (context_date_deb_pos > -1) {
							context_date_deb_pattern = context_date_deb_value.substring(0, context_date_deb_pos);
							context_date_deb_value = context_date_deb_value.substring(context_date_deb_pos + 1);
						}

						context.date_deb = (java.util.Date) (new java.text.SimpleDateFormat(context_date_deb_pattern)
								.parse(context_date_deb_value));

					} catch (ParseException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"date_deb", e.getMessage()));
						context.date_deb = null;
					}
					context.setContextType("date_fin", "id_Date");
					try {
						String context_date_fin_value = context.getProperty("date_fin");
						if (context_date_fin_value == null) {
							context_date_fin_value = "";
						}
						int context_date_fin_pos = context_date_fin_value.indexOf(";");
						String context_date_fin_pattern = "yyyy-MM-dd HH:mm:ss";
						if (context_date_fin_pos > -1) {
							context_date_fin_pattern = context_date_fin_value.substring(0, context_date_fin_pos);
							context_date_fin_value = context_date_fin_value.substring(context_date_fin_pos + 1);
						}

						context.date_fin = (java.util.Date) (new java.text.SimpleDateFormat(context_date_fin_pattern)
								.parse(context_date_fin_value));

					} catch (ParseException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"date_fin", e.getMessage()));
						context.date_fin = null;
					}
					context.setContextType("File", "id_Directory");
					context.File = (String) context.getProperty("File");
					context.setContextType("name_file", "id_String");
					context.name_file = (String) context.getProperty("name_file");
					context.setContextType("Date_Execution", "id_Date");
					try {
						String context_Date_Execution_value = context.getProperty("Date_Execution");
						if (context_Date_Execution_value == null) {
							context_Date_Execution_value = "";
						}
						int context_Date_Execution_pos = context_Date_Execution_value.indexOf(";");
						String context_Date_Execution_pattern = "yyyy-MM-dd HH:mm:ss";
						if (context_Date_Execution_pos > -1) {
							context_Date_Execution_pattern = context_Date_Execution_value.substring(0,
									context_Date_Execution_pos);
							context_Date_Execution_value = context_Date_Execution_value
									.substring(context_Date_Execution_pos + 1);
						}

						context.Date_Execution = (java.util.Date) (new java.text.SimpleDateFormat(
								context_Date_Execution_pattern).parse(context_Date_Execution_value));

					} catch (ParseException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"Date_Execution", e.getMessage()));
						context.Date_Execution = null;
					}
					context.setContextType("nbJour", "id_Integer");
					try {
						context.nbJour = routines.system.ParserUtils.parseTo_Integer(context.getProperty("nbJour"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"nbJour", e.getMessage()));
						context.nbJour = null;
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("date_deb")) {
				context.date_deb = (java.util.Date) parentContextMap.get("date_deb");
			}
			if (parentContextMap.containsKey("date_fin")) {
				context.date_fin = (java.util.Date) parentContextMap.get("date_fin");
			}
			if (parentContextMap.containsKey("File")) {
				context.File = (String) parentContextMap.get("File");
			}
			if (parentContextMap.containsKey("name_file")) {
				context.name_file = (String) parentContextMap.get("name_file");
			}
			if (parentContextMap.containsKey("Date_Execution")) {
				context.Date_Execution = (java.util.Date) parentContextMap.get("Date_Execution");
			}
			if (parentContextMap.containsKey("nbJour")) {
				context.nbJour = (Integer) parentContextMap.get("nbJour");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRowGenerator_1) {
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

			e_tRowGenerator_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Generer_Calendrier");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 155325 characters generated by Talend Open Studio for Data Integration on the
 * 26 septembre 2023 à 13:47:39 GMT+01:00
 ************************************************************************************************/