// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package test_etl.tuniqrow_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: tUniqRow Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class tUniqRow implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "tUniqRow";
	private final String projectName = "TEST_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				tUniqRow.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(tUniqRow.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "";
            String url_tDBConnection_1 = "jdbc:postgresql://"+"localhost"+":"+"5432"+"/"+"Netflix";
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = "postgres";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JBcND0flHU/XavFzfFVrEKCuoYviBFrGhzDjE5ks7Z385svUrTGocQ==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];

	
			    public float id_id;

				public float getId_id () {
					return this.id_id;
				}
				
			    public float id;

				public float getId () {
					return this.id;
				}
				
			    public Float age;

				public Float getAge () {
					return this.age;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Float bmi;

				public Float getBmi () {
					return this.bmi;
				}
				
			    public Float children;

				public Float getChildren () {
					return this.children;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float charges;

				public Float getCharges () {
					return this.charges;
				}
				
			    public String id_1;

				public String getId_1 () {
					return this.id_1;
				}
				
			    public Float Year;

				public Float getYear () {
					return this.Year;
				}
				
			    public String Make;

				public String getMake () {
					return this.Make;
				}
				
			    public String Model;

				public String getModel () {
					return this.Model;
				}
				
			    public String Kilometres;

				public String getKilometres () {
					return this.Kilometres;
				}
				
			    public String Body_Type;

				public String getBody_Type () {
					return this.Body_Type;
				}
				
			    public String Engine;

				public String getEngine () {
					return this.Engine;
				}
				
			    public String _Transmission;

				public String get_Transmission () {
					return this._Transmission;
				}
				
			    public String Drivetrain;

				public String getDrivetrain () {
					return this.Drivetrain;
				}
				
			    public String _Exterior_Colour;

				public String get_Exterior_Colour () {
					return this._Exterior_Colour;
				}
				
			    public String _Interior_Colour;

				public String get_Interior_Colour () {
					return this._Interior_Colour;
				}
				
			    public Float _Passengers;

				public Float get_Passengers () {
					return this._Passengers;
				}
				
			    public String Doors;

				public String getDoors () {
					return this.Doors;
				}
				
			    public String _Fuel_Type;

				public String get_Fuel_Type () {
					return this._Fuel_Type;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String _Highway;

				public String get_Highway () {
					return this._Highway;
				}
				
			    public Float price;

				public Float getPrice () {
					return this.price;
				}
				
			    public java.util.Date generator;

				public java.util.Date getGenerator () {
					return this.generator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_ETL_tUniqRow.length) {
				if(length < 1024 && commonByteArray_TEST_ETL_tUniqRow.length == 0) {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[1024];
				} else {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_ETL_tUniqRow, 0, length);
			strReturn = new String(commonByteArray_TEST_ETL_tUniqRow, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			        this.id_id = dis.readFloat();
					
			        this.id = dis.readFloat();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.age = null;
           				} else {
           			    	this.age = dis.readFloat();
           				}
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.bmi = null;
           				} else {
           			    	this.bmi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.children = null;
           				} else {
           			    	this.children = dis.readFloat();
           				}
					
					this.smoker = readString(dis);
					
					this.region = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.charges = null;
           				} else {
           			    	this.charges = dis.readFloat();
           				}
					
					this.id_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Year = null;
           				} else {
           			    	this.Year = dis.readFloat();
           				}
					
					this.Make = readString(dis);
					
					this.Model = readString(dis);
					
					this.Kilometres = readString(dis);
					
					this.Body_Type = readString(dis);
					
					this.Engine = readString(dis);
					
					this._Transmission = readString(dis);
					
					this.Drivetrain = readString(dis);
					
					this._Exterior_Colour = readString(dis);
					
					this._Interior_Colour = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Passengers = null;
           				} else {
           			    	this._Passengers = dis.readFloat();
           				}
					
					this.Doors = readString(dis);
					
					this._Fuel_Type = readString(dis);
					
					this.City = readString(dis);
					
					this._Highway = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price = null;
           				} else {
           			    	this.price = dis.readFloat();
           				}
					
					this.generator = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.id_id);
					
					// float
				
		            	dos.writeFloat(this.id);
					
					// Float
				
						if(this.age == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.age);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
					// Float
				
						if(this.bmi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.bmi);
		            	}
					
					// Float
				
						if(this.children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.children);
		            	}
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// Float
				
						if(this.charges == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.charges);
		            	}
					
					// String
				
						writeString(this.id_1,dos);
					
					// Float
				
						if(this.Year == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Year);
		            	}
					
					// String
				
						writeString(this.Make,dos);
					
					// String
				
						writeString(this.Model,dos);
					
					// String
				
						writeString(this.Kilometres,dos);
					
					// String
				
						writeString(this.Body_Type,dos);
					
					// String
				
						writeString(this.Engine,dos);
					
					// String
				
						writeString(this._Transmission,dos);
					
					// String
				
						writeString(this.Drivetrain,dos);
					
					// String
				
						writeString(this._Exterior_Colour,dos);
					
					// String
				
						writeString(this._Interior_Colour,dos);
					
					// Float
				
						if(this._Passengers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Passengers);
		            	}
					
					// String
				
						writeString(this.Doors,dos);
					
					// String
				
						writeString(this._Fuel_Type,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this._Highway,dos);
					
					// Float
				
						if(this.price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price);
		            	}
					
					// java.util.Date
				
						writeDate(this.generator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_id="+String.valueOf(id_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",age="+String.valueOf(age));
		sb.append(",sex="+sex);
		sb.append(",bmi="+String.valueOf(bmi));
		sb.append(",children="+String.valueOf(children));
		sb.append(",smoker="+smoker);
		sb.append(",region="+region);
		sb.append(",charges="+String.valueOf(charges));
		sb.append(",id_1="+id_1);
		sb.append(",Year="+String.valueOf(Year));
		sb.append(",Make="+Make);
		sb.append(",Model="+Model);
		sb.append(",Kilometres="+Kilometres);
		sb.append(",Body_Type="+Body_Type);
		sb.append(",Engine="+Engine);
		sb.append(",_Transmission="+_Transmission);
		sb.append(",Drivetrain="+Drivetrain);
		sb.append(",_Exterior_Colour="+_Exterior_Colour);
		sb.append(",_Interior_Colour="+_Interior_Colour);
		sb.append(",_Passengers="+String.valueOf(_Passengers));
		sb.append(",Doors="+Doors);
		sb.append(",_Fuel_Type="+_Fuel_Type);
		sb.append(",City="+City);
		sb.append(",_Highway="+_Highway);
		sb.append(",price="+String.valueOf(price));
		sb.append(",generator="+String.valueOf(generator));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];

	
			    public float id_id;

				public float getId_id () {
					return this.id_id;
				}
				
			    public float id;

				public float getId () {
					return this.id;
				}
				
			    public Float age;

				public Float getAge () {
					return this.age;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Float bmi;

				public Float getBmi () {
					return this.bmi;
				}
				
			    public Float children;

				public Float getChildren () {
					return this.children;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float charges;

				public Float getCharges () {
					return this.charges;
				}
				
			    public String id_1;

				public String getId_1 () {
					return this.id_1;
				}
				
			    public Float Year;

				public Float getYear () {
					return this.Year;
				}
				
			    public String Make;

				public String getMake () {
					return this.Make;
				}
				
			    public String Model;

				public String getModel () {
					return this.Model;
				}
				
			    public String Kilometres;

				public String getKilometres () {
					return this.Kilometres;
				}
				
			    public String Body_Type;

				public String getBody_Type () {
					return this.Body_Type;
				}
				
			    public String Engine;

				public String getEngine () {
					return this.Engine;
				}
				
			    public String _Transmission;

				public String get_Transmission () {
					return this._Transmission;
				}
				
			    public String Drivetrain;

				public String getDrivetrain () {
					return this.Drivetrain;
				}
				
			    public String _Exterior_Colour;

				public String get_Exterior_Colour () {
					return this._Exterior_Colour;
				}
				
			    public String _Interior_Colour;

				public String get_Interior_Colour () {
					return this._Interior_Colour;
				}
				
			    public Float _Passengers;

				public Float get_Passengers () {
					return this._Passengers;
				}
				
			    public String Doors;

				public String getDoors () {
					return this.Doors;
				}
				
			    public String _Fuel_Type;

				public String get_Fuel_Type () {
					return this._Fuel_Type;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String _Highway;

				public String get_Highway () {
					return this._Highway;
				}
				
			    public Float price;

				public Float getPrice () {
					return this.price;
				}
				
			    public java.util.Date generator;

				public java.util.Date getGenerator () {
					return this.generator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_ETL_tUniqRow.length) {
				if(length < 1024 && commonByteArray_TEST_ETL_tUniqRow.length == 0) {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[1024];
				} else {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_ETL_tUniqRow, 0, length);
			strReturn = new String(commonByteArray_TEST_ETL_tUniqRow, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			        this.id_id = dis.readFloat();
					
			        this.id = dis.readFloat();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.age = null;
           				} else {
           			    	this.age = dis.readFloat();
           				}
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.bmi = null;
           				} else {
           			    	this.bmi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.children = null;
           				} else {
           			    	this.children = dis.readFloat();
           				}
					
					this.smoker = readString(dis);
					
					this.region = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.charges = null;
           				} else {
           			    	this.charges = dis.readFloat();
           				}
					
					this.id_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Year = null;
           				} else {
           			    	this.Year = dis.readFloat();
           				}
					
					this.Make = readString(dis);
					
					this.Model = readString(dis);
					
					this.Kilometres = readString(dis);
					
					this.Body_Type = readString(dis);
					
					this.Engine = readString(dis);
					
					this._Transmission = readString(dis);
					
					this.Drivetrain = readString(dis);
					
					this._Exterior_Colour = readString(dis);
					
					this._Interior_Colour = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Passengers = null;
           				} else {
           			    	this._Passengers = dis.readFloat();
           				}
					
					this.Doors = readString(dis);
					
					this._Fuel_Type = readString(dis);
					
					this.City = readString(dis);
					
					this._Highway = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price = null;
           				} else {
           			    	this.price = dis.readFloat();
           				}
					
					this.generator = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.id_id);
					
					// float
				
		            	dos.writeFloat(this.id);
					
					// Float
				
						if(this.age == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.age);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
					// Float
				
						if(this.bmi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.bmi);
		            	}
					
					// Float
				
						if(this.children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.children);
		            	}
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// Float
				
						if(this.charges == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.charges);
		            	}
					
					// String
				
						writeString(this.id_1,dos);
					
					// Float
				
						if(this.Year == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Year);
		            	}
					
					// String
				
						writeString(this.Make,dos);
					
					// String
				
						writeString(this.Model,dos);
					
					// String
				
						writeString(this.Kilometres,dos);
					
					// String
				
						writeString(this.Body_Type,dos);
					
					// String
				
						writeString(this.Engine,dos);
					
					// String
				
						writeString(this._Transmission,dos);
					
					// String
				
						writeString(this.Drivetrain,dos);
					
					// String
				
						writeString(this._Exterior_Colour,dos);
					
					// String
				
						writeString(this._Interior_Colour,dos);
					
					// Float
				
						if(this._Passengers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Passengers);
		            	}
					
					// String
				
						writeString(this.Doors,dos);
					
					// String
				
						writeString(this._Fuel_Type,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this._Highway,dos);
					
					// Float
				
						if(this.price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price);
		            	}
					
					// java.util.Date
				
						writeDate(this.generator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_id="+String.valueOf(id_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",age="+String.valueOf(age));
		sb.append(",sex="+sex);
		sb.append(",bmi="+String.valueOf(bmi));
		sb.append(",children="+String.valueOf(children));
		sb.append(",smoker="+smoker);
		sb.append(",region="+region);
		sb.append(",charges="+String.valueOf(charges));
		sb.append(",id_1="+id_1);
		sb.append(",Year="+String.valueOf(Year));
		sb.append(",Make="+Make);
		sb.append(",Model="+Model);
		sb.append(",Kilometres="+Kilometres);
		sb.append(",Body_Type="+Body_Type);
		sb.append(",Engine="+Engine);
		sb.append(",_Transmission="+_Transmission);
		sb.append(",Drivetrain="+Drivetrain);
		sb.append(",_Exterior_Colour="+_Exterior_Colour);
		sb.append(",_Interior_Colour="+_Interior_Colour);
		sb.append(",_Passengers="+String.valueOf(_Passengers));
		sb.append(",Doors="+Doors);
		sb.append(",_Fuel_Type="+_Fuel_Type);
		sb.append(",City="+City);
		sb.append(",_Highway="+_Highway);
		sb.append(",price="+String.valueOf(price));
		sb.append(",generator="+String.valueOf(generator));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];

	
			    public float id_id;

				public float getId_id () {
					return this.id_id;
				}
				
			    public float id;

				public float getId () {
					return this.id;
				}
				
			    public Float age;

				public Float getAge () {
					return this.age;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Float bmi;

				public Float getBmi () {
					return this.bmi;
				}
				
			    public Float children;

				public Float getChildren () {
					return this.children;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float charges;

				public Float getCharges () {
					return this.charges;
				}
				
			    public String id_1;

				public String getId_1 () {
					return this.id_1;
				}
				
			    public Float Year;

				public Float getYear () {
					return this.Year;
				}
				
			    public String Make;

				public String getMake () {
					return this.Make;
				}
				
			    public String Model;

				public String getModel () {
					return this.Model;
				}
				
			    public String Kilometres;

				public String getKilometres () {
					return this.Kilometres;
				}
				
			    public String Body_Type;

				public String getBody_Type () {
					return this.Body_Type;
				}
				
			    public String Engine;

				public String getEngine () {
					return this.Engine;
				}
				
			    public String _Transmission;

				public String get_Transmission () {
					return this._Transmission;
				}
				
			    public String Drivetrain;

				public String getDrivetrain () {
					return this.Drivetrain;
				}
				
			    public String _Exterior_Colour;

				public String get_Exterior_Colour () {
					return this._Exterior_Colour;
				}
				
			    public String _Interior_Colour;

				public String get_Interior_Colour () {
					return this._Interior_Colour;
				}
				
			    public Float _Passengers;

				public Float get_Passengers () {
					return this._Passengers;
				}
				
			    public String Doors;

				public String getDoors () {
					return this.Doors;
				}
				
			    public String _Fuel_Type;

				public String get_Fuel_Type () {
					return this._Fuel_Type;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String _Highway;

				public String get_Highway () {
					return this._Highway;
				}
				
			    public Float price;

				public Float getPrice () {
					return this.price;
				}
				
			    public java.util.Date generator;

				public java.util.Date getGenerator () {
					return this.generator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_ETL_tUniqRow.length) {
				if(length < 1024 && commonByteArray_TEST_ETL_tUniqRow.length == 0) {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[1024];
				} else {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_ETL_tUniqRow, 0, length);
			strReturn = new String(commonByteArray_TEST_ETL_tUniqRow, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			        this.id_id = dis.readFloat();
					
			        this.id = dis.readFloat();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.age = null;
           				} else {
           			    	this.age = dis.readFloat();
           				}
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.bmi = null;
           				} else {
           			    	this.bmi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.children = null;
           				} else {
           			    	this.children = dis.readFloat();
           				}
					
					this.smoker = readString(dis);
					
					this.region = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.charges = null;
           				} else {
           			    	this.charges = dis.readFloat();
           				}
					
					this.id_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Year = null;
           				} else {
           			    	this.Year = dis.readFloat();
           				}
					
					this.Make = readString(dis);
					
					this.Model = readString(dis);
					
					this.Kilometres = readString(dis);
					
					this.Body_Type = readString(dis);
					
					this.Engine = readString(dis);
					
					this._Transmission = readString(dis);
					
					this.Drivetrain = readString(dis);
					
					this._Exterior_Colour = readString(dis);
					
					this._Interior_Colour = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Passengers = null;
           				} else {
           			    	this._Passengers = dis.readFloat();
           				}
					
					this.Doors = readString(dis);
					
					this._Fuel_Type = readString(dis);
					
					this.City = readString(dis);
					
					this._Highway = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price = null;
           				} else {
           			    	this.price = dis.readFloat();
           				}
					
					this.generator = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.id_id);
					
					// float
				
		            	dos.writeFloat(this.id);
					
					// Float
				
						if(this.age == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.age);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
					// Float
				
						if(this.bmi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.bmi);
		            	}
					
					// Float
				
						if(this.children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.children);
		            	}
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// Float
				
						if(this.charges == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.charges);
		            	}
					
					// String
				
						writeString(this.id_1,dos);
					
					// Float
				
						if(this.Year == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Year);
		            	}
					
					// String
				
						writeString(this.Make,dos);
					
					// String
				
						writeString(this.Model,dos);
					
					// String
				
						writeString(this.Kilometres,dos);
					
					// String
				
						writeString(this.Body_Type,dos);
					
					// String
				
						writeString(this.Engine,dos);
					
					// String
				
						writeString(this._Transmission,dos);
					
					// String
				
						writeString(this.Drivetrain,dos);
					
					// String
				
						writeString(this._Exterior_Colour,dos);
					
					// String
				
						writeString(this._Interior_Colour,dos);
					
					// Float
				
						if(this._Passengers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Passengers);
		            	}
					
					// String
				
						writeString(this.Doors,dos);
					
					// String
				
						writeString(this._Fuel_Type,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this._Highway,dos);
					
					// Float
				
						if(this.price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price);
		            	}
					
					// java.util.Date
				
						writeDate(this.generator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_id="+String.valueOf(id_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",age="+String.valueOf(age));
		sb.append(",sex="+sex);
		sb.append(",bmi="+String.valueOf(bmi));
		sb.append(",children="+String.valueOf(children));
		sb.append(",smoker="+smoker);
		sb.append(",region="+region);
		sb.append(",charges="+String.valueOf(charges));
		sb.append(",id_1="+id_1);
		sb.append(",Year="+String.valueOf(Year));
		sb.append(",Make="+Make);
		sb.append(",Model="+Model);
		sb.append(",Kilometres="+Kilometres);
		sb.append(",Body_Type="+Body_Type);
		sb.append(",Engine="+Engine);
		sb.append(",_Transmission="+_Transmission);
		sb.append(",Drivetrain="+Drivetrain);
		sb.append(",_Exterior_Colour="+_Exterior_Colour);
		sb.append(",_Interior_Colour="+_Interior_Colour);
		sb.append(",_Passengers="+String.valueOf(_Passengers));
		sb.append(",Doors="+Doors);
		sb.append(",_Fuel_Type="+_Fuel_Type);
		sb.append(",City="+City);
		sb.append(",_Highway="+_Highway);
		sb.append(",price="+String.valueOf(price));
		sb.append(",generator="+String.valueOf(generator));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];

	
			    public Float age;

				public Float getAge () {
					return this.age;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Float bmi;

				public Float getBmi () {
					return this.bmi;
				}
				
			    public Float children;

				public Float getChildren () {
					return this.children;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float charges;

				public Float getCharges () {
					return this.charges;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public float id_id;

				public float getId_id () {
					return this.id_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_ETL_tUniqRow.length) {
				if(length < 1024 && commonByteArray_TEST_ETL_tUniqRow.length == 0) {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[1024];
				} else {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_ETL_tUniqRow, 0, length);
			strReturn = new String(commonByteArray_TEST_ETL_tUniqRow, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.age = null;
           				} else {
           			    	this.age = dis.readFloat();
           				}
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.bmi = null;
           				} else {
           			    	this.bmi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.children = null;
           				} else {
           			    	this.children = dis.readFloat();
           				}
					
					this.smoker = readString(dis);
					
					this.region = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.charges = null;
           				} else {
           			    	this.charges = dis.readFloat();
           				}
					
					this.id = readString(dis);
					
			        this.id_id = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.age == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.age);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
					// Float
				
						if(this.bmi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.bmi);
		            	}
					
					// Float
				
						if(this.children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.children);
		            	}
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// Float
				
						if(this.charges == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.charges);
		            	}
					
					// String
				
						writeString(this.id,dos);
					
					// float
				
		            	dos.writeFloat(this.id_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("age="+String.valueOf(age));
		sb.append(",sex="+sex);
		sb.append(",bmi="+String.valueOf(bmi));
		sb.append(",children="+String.valueOf(children));
		sb.append(",smoker="+smoker);
		sb.append(",region="+region);
		sb.append(",charges="+String.valueOf(charges));
		sb.append(",id="+id);
		sb.append(",id_id="+String.valueOf(id_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];

	
			    public Float age;

				public Float getAge () {
					return this.age;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Float bmi;

				public Float getBmi () {
					return this.bmi;
				}
				
			    public Float children;

				public Float getChildren () {
					return this.children;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float charges;

				public Float getCharges () {
					return this.charges;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public float id_id;

				public float getId_id () {
					return this.id_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_ETL_tUniqRow.length) {
				if(length < 1024 && commonByteArray_TEST_ETL_tUniqRow.length == 0) {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[1024];
				} else {
   					commonByteArray_TEST_ETL_tUniqRow = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_ETL_tUniqRow, 0, length);
			strReturn = new String(commonByteArray_TEST_ETL_tUniqRow, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.age = null;
           				} else {
           			    	this.age = dis.readFloat();
           				}
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.bmi = null;
           				} else {
           			    	this.bmi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.children = null;
           				} else {
           			    	this.children = dis.readFloat();
           				}
					
					this.smoker = readString(dis);
					
					this.region = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.charges = null;
           				} else {
           			    	this.charges = dis.readFloat();
           				}
					
					this.id = readString(dis);
					
			        this.id_id = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.age == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.age);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
					// Float
				
						if(this.bmi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.bmi);
		            	}
					
					// Float
				
						if(this.children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.children);
		            	}
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// Float
				
						if(this.charges == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.charges);
		            	}
					
					// String
				
						writeString(this.id,dos);
					
					// float
				
		            	dos.writeFloat(this.id_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("age="+String.valueOf(age));
		sb.append(",sex="+sex);
		sb.append(",bmi="+String.valueOf(bmi));
		sb.append(",children="+String.valueOf(children));
		sb.append(",smoker="+smoker);
		sb.append(",region="+region);
		sb.append(",charges="+String.valueOf(charges));
		sb.append(",id="+id);
		sb.append(",id_id="+String.valueOf(id_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row4Struct row4 = new row4Struct();
row3Struct row3 = new row3Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[27];

        public void addRow(String[] row) {

            for (int i = 0; i < 27; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 26 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 26 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[26] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"id_id","id","age","sex","bmi","children","smoker","region","charges","id_1","Year","Make","Model","Kilometres","Body_Type","Engine","_Transmission","Drivetrain","_Exterior_Colour","_Interior_Colour","_Passengers","Doors","_Fuel_Type","City","_Highway","price","generator",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[27];

        public void addRow(String[] row) {

            for (int i = 0; i < 27; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 26 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 26 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[26] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"id_id","id","age","sex","bmi","children","smoker","region","charges","id_1","Year","Make","Model","Kilometres","Body_Type","Engine","_Transmission","Drivetrain","_Exterior_Colour","_Interior_Colour","_Passengers","Doors","_Fuel_Type","City","_Highway","price","generator",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					float id_id;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.id_id;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.id_id != other.id_id) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date var1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT * FROM couples";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.age = null;
							} else {
		                          
            row1.age = rs_tDBInput_1.getFloat(1);
            if(rs_tDBInput_1.wasNull()){
                    row1.age = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.sex = null;
							} else {
	                         		
        	row1.sex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.bmi = null;
							} else {
		                          
            row1.bmi = rs_tDBInput_1.getFloat(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.bmi = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.children = null;
							} else {
		                          
            row1.children = rs_tDBInput_1.getFloat(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.children = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.smoker = null;
							} else {
	                         		
        	row1.smoker = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.region = null;
							} else {
	                         		
        	row1.region = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.charges = null;
							} else {
		                          
            row1.charges = rs_tDBInput_1.getFloat(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.charges = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.id = null;
							} else {
	                         		
        	row1.id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.id_id = 0;
							} else {
		                          
            row1.id_id = rs_tDBInput_1.getFloat(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row2__id = row1.id_id ;
	                        		    	if(exprKeyValue_row2__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.id = (float)(Float) exprKeyValue_row2__id;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = TalendDate.getCurrentDate() ;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.id_id = row1.id_id ;
out1_tmp.id = row2.id ;
out1_tmp.age = row1.age ;
out1_tmp.sex = row1.sex ;
out1_tmp.bmi = row1.bmi ;
out1_tmp.children = row1.children ;
out1_tmp.smoker = row1.smoker ;
out1_tmp.region = row1.region ;
out1_tmp.charges = row1.charges ;
out1_tmp.id_1 = row1.id ;
out1_tmp.Year = row2.Year ;
out1_tmp.Make = row2.Make ;
out1_tmp.Model = row2.Model ;
out1_tmp.Kilometres = row2.Kilometres ;
out1_tmp.Body_Type = row2.Body_Type ;
out1_tmp.Engine = row2.Engine ;
out1_tmp._Transmission = row2._Transmission ;
out1_tmp.Drivetrain = row2.Drivetrain ;
out1_tmp._Exterior_Colour = row2._Exterior_Colour ;
out1_tmp._Interior_Colour = row2._Interior_Colour ;
out1_tmp._Passengers = row2._Passengers ;
out1_tmp.Doors = row2.Doors ;
out1_tmp._Fuel_Type = row2._Fuel_Type ;
out1_tmp.City = row2.City ;
out1_tmp._Highway = row2._Highway ;
out1_tmp.price = row2.price ;
out1_tmp.generator = Var.var1 ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					
row3 = null;			row4 = null;			
finder_tUniqRow_1.id_id = out1.id_id;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.id_id = out1.id_id;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.id_id = out1.id_id;			row4.id = out1.id;			row4.age = out1.age;			row4.sex = out1.sex;			row4.bmi = out1.bmi;			row4.children = out1.children;			row4.smoker = out1.smoker;			row4.region = out1.region;			row4.charges = out1.charges;			row4.id_1 = out1.id_1;			row4.Year = out1.Year;			row4.Make = out1.Make;			row4.Model = out1.Model;			row4.Kilometres = out1.Kilometres;			row4.Body_Type = out1.Body_Type;			row4.Engine = out1.Engine;			row4._Transmission = out1._Transmission;			row4.Drivetrain = out1.Drivetrain;			row4._Exterior_Colour = out1._Exterior_Colour;			row4._Interior_Colour = out1._Interior_Colour;			row4._Passengers = out1._Passengers;			row4.Doors = out1.Doors;			row4._Fuel_Type = out1._Fuel_Type;			row4.City = out1.City;			row4._Highway = out1._Highway;			row4.price = out1.price;			row4.generator = out1.generator;					
		nb_uniques_tUniqRow_1++;
	} else {
if(row3 == null){ 
	
	row3 = new row3Struct();
}				row3.id_id = out1.id_id;			row3.id = out1.id;			row3.age = out1.age;			row3.sex = out1.sex;			row3.bmi = out1.bmi;			row3.children = out1.children;			row3.smoker = out1.smoker;			row3.region = out1.region;			row3.charges = out1.charges;			row3.id_1 = out1.id_1;			row3.Year = out1.Year;			row3.Make = out1.Make;			row3.Model = out1.Model;			row3.Kilometres = out1.Kilometres;			row3.Body_Type = out1.Body_Type;			row3.Engine = out1.Engine;			row3._Transmission = out1._Transmission;			row3.Drivetrain = out1.Drivetrain;			row3._Exterior_Colour = out1._Exterior_Colour;			row3._Interior_Colour = out1._Interior_Colour;			row3._Passengers = out1._Passengers;			row3.Doors = out1.Doors;			row3._Fuel_Type = out1._Fuel_Type;			row3.City = out1.City;			row3._Highway = out1._Highway;			row3.price = out1.price;			row3.generator = out1.generator;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[27];
              
                 row_tLogRow_2[0]=    						
								FormatterUtils.formatUnwithE(row4.id_id)
					          ;	
										
    			              
                 row_tLogRow_2[1]=    						
								FormatterUtils.formatUnwithE(row4.id)
					          ;	
										
    			   				
	    		if(row4.age != null) { //              
                 row_tLogRow_2[2]=    						
								FormatterUtils.formatUnwithE(row4.age)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.sex != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(row4.sex)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.bmi != null) { //              
                 row_tLogRow_2[4]=    						
								FormatterUtils.formatUnwithE(row4.bmi)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.children != null) { //              
                 row_tLogRow_2[5]=    						
								FormatterUtils.formatUnwithE(row4.children)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.smoker != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(row4.smoker)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.region != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(row4.region)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.charges != null) { //              
                 row_tLogRow_2[8]=    						
								FormatterUtils.formatUnwithE(row4.charges)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.id_1 != null) { //              
                 row_tLogRow_2[9]=    						    
				                String.valueOf(row4.id_1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Year != null) { //              
                 row_tLogRow_2[10]=    						
								FormatterUtils.formatUnwithE(row4.Year)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Make != null) { //              
                 row_tLogRow_2[11]=    						    
				                String.valueOf(row4.Make)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Model != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(row4.Model)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Kilometres != null) { //              
                 row_tLogRow_2[13]=    						    
				                String.valueOf(row4.Kilometres)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Body_Type != null) { //              
                 row_tLogRow_2[14]=    						    
				                String.valueOf(row4.Body_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Engine != null) { //              
                 row_tLogRow_2[15]=    						    
				                String.valueOf(row4.Engine)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Transmission != null) { //              
                 row_tLogRow_2[16]=    						    
				                String.valueOf(row4._Transmission)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Drivetrain != null) { //              
                 row_tLogRow_2[17]=    						    
				                String.valueOf(row4.Drivetrain)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Exterior_Colour != null) { //              
                 row_tLogRow_2[18]=    						    
				                String.valueOf(row4._Exterior_Colour)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Interior_Colour != null) { //              
                 row_tLogRow_2[19]=    						    
				                String.valueOf(row4._Interior_Colour)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Passengers != null) { //              
                 row_tLogRow_2[20]=    						
								FormatterUtils.formatUnwithE(row4._Passengers)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Doors != null) { //              
                 row_tLogRow_2[21]=    						    
				                String.valueOf(row4.Doors)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Fuel_Type != null) { //              
                 row_tLogRow_2[22]=    						    
				                String.valueOf(row4._Fuel_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.City != null) { //              
                 row_tLogRow_2[23]=    						    
				                String.valueOf(row4.City)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4._Highway != null) { //              
                 row_tLogRow_2[24]=    						    
				                String.valueOf(row4._Highway)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.price != null) { //              
                 row_tLogRow_2[25]=    						
								FormatterUtils.formatUnwithE(row4.price)
					          ;	
							
	    		} //			
    			   				
	    		if(row4.generator != null) { //              
                 row_tLogRow_2[26]=    						
								FormatterUtils.format_Date(row4.generator, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[27];
              
                 row_tLogRow_1[0]=    						
								FormatterUtils.formatUnwithE(row3.id_id)
					          ;	
										
    			              
                 row_tLogRow_1[1]=    						
								FormatterUtils.formatUnwithE(row3.id)
					          ;	
										
    			   				
	    		if(row3.age != null) { //              
                 row_tLogRow_1[2]=    						
								FormatterUtils.formatUnwithE(row3.age)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.sex != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row3.sex)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.bmi != null) { //              
                 row_tLogRow_1[4]=    						
								FormatterUtils.formatUnwithE(row3.bmi)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.children != null) { //              
                 row_tLogRow_1[5]=    						
								FormatterUtils.formatUnwithE(row3.children)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.smoker != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row3.smoker)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.region != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row3.region)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.charges != null) { //              
                 row_tLogRow_1[8]=    						
								FormatterUtils.formatUnwithE(row3.charges)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.id_1 != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row3.id_1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Year != null) { //              
                 row_tLogRow_1[10]=    						
								FormatterUtils.formatUnwithE(row3.Year)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Make != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row3.Make)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Model != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row3.Model)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Kilometres != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row3.Kilometres)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Body_Type != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row3.Body_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Engine != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(row3.Engine)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Transmission != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(row3._Transmission)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Drivetrain != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(row3.Drivetrain)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Exterior_Colour != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(row3._Exterior_Colour)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Interior_Colour != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(row3._Interior_Colour)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Passengers != null) { //              
                 row_tLogRow_1[20]=    						
								FormatterUtils.formatUnwithE(row3._Passengers)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.Doors != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(row3.Doors)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Fuel_Type != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(row3._Fuel_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.City != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(row3.City)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3._Highway != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(row3._Highway)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.price != null) { //              
                 row_tLogRow_1[25]=    						
								FormatterUtils.formatUnwithE(row3.price)
					          ;	
							
	    		} //			
    			   				
	    		if(row3.generator != null) { //              
                 row_tLogRow_1[26]=    						
								FormatterUtils.format_Date(row3.generator, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */




	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */




	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_TEST_ETL_tUniqRow = new byte[0];
    static byte[] commonByteArray_TEST_ETL_tUniqRow = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public float id;

				public float getId () {
					return this.id;
				}
				
			    public Float Year;

				public Float getYear () {
					return this.Year;
				}
				
			    public String Make;

				public String getMake () {
					return this.Make;
				}
				
			    public String Model;

				public String getModel () {
					return this.Model;
				}
				
			    public String Kilometres;

				public String getKilometres () {
					return this.Kilometres;
				}
				
			    public String Body_Type;

				public String getBody_Type () {
					return this.Body_Type;
				}
				
			    public String Engine;

				public String getEngine () {
					return this.Engine;
				}
				
			    public String _Transmission;

				public String get_Transmission () {
					return this._Transmission;
				}
				
			    public String Drivetrain;

				public String getDrivetrain () {
					return this.Drivetrain;
				}
				
			    public String _Exterior_Colour;

				public String get_Exterior_Colour () {
					return this._Exterior_Colour;
				}
				
			    public String _Interior_Colour;

				public String get_Interior_Colour () {
					return this._Interior_Colour;
				}
				
			    public Float _Passengers;

				public Float get_Passengers () {
					return this._Passengers;
				}
				
			    public String Doors;

				public String getDoors () {
					return this.Doors;
				}
				
			    public String _Fuel_Type;

				public String get_Fuel_Type () {
					return this._Fuel_Type;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String _Highway;

				public String get_Highway () {
					return this._Highway;
				}
				
			    public Float price;

				public Float getPrice () {
					return this.price;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.Year = this.Year;
	            other.Make = this.Make;
	            other.Model = this.Model;
	            other.Kilometres = this.Kilometres;
	            other.Body_Type = this.Body_Type;
	            other.Engine = this.Engine;
	            other._Transmission = this._Transmission;
	            other.Drivetrain = this.Drivetrain;
	            other._Exterior_Colour = this._Exterior_Colour;
	            other._Interior_Colour = this._Interior_Colour;
	            other._Passengers = this._Passengers;
	            other.Doors = this.Doors;
	            other._Fuel_Type = this._Fuel_Type;
	            other.City = this.City;
	            other._Highway = this._Highway;
	            other.price = this.price;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_ETL_tUniqRow) {

        	try {

        		int length = 0;
		
			        this.id = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// float
				
		            	dos.writeFloat(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Year = null;
           				} else {
           			    	this.Year = dis.readFloat();
           				}
					
						this.Make = readString(dis,ois);
					
						this.Model = readString(dis,ois);
					
						this.Kilometres = readString(dis,ois);
					
						this.Body_Type = readString(dis,ois);
					
						this.Engine = readString(dis,ois);
					
						this._Transmission = readString(dis,ois);
					
						this.Drivetrain = readString(dis,ois);
					
						this._Exterior_Colour = readString(dis,ois);
					
						this._Interior_Colour = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Passengers = null;
           				} else {
           			    	this._Passengers = dis.readFloat();
           				}
					
						this.Doors = readString(dis,ois);
					
						this._Fuel_Type = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this._Highway = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price = null;
           				} else {
           			    	this.price = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.Year == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Year);
		            	}
					
						writeString(this.Make, dos, oos);
					
						writeString(this.Model, dos, oos);
					
						writeString(this.Kilometres, dos, oos);
					
						writeString(this.Body_Type, dos, oos);
					
						writeString(this.Engine, dos, oos);
					
						writeString(this._Transmission, dos, oos);
					
						writeString(this.Drivetrain, dos, oos);
					
						writeString(this._Exterior_Colour, dos, oos);
					
						writeString(this._Interior_Colour, dos, oos);
					
						if(this._Passengers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Passengers);
		            	}
					
						writeString(this.Doors, dos, oos);
					
						writeString(this._Fuel_Type, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this._Highway, dos, oos);
					
						if(this.price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",Year="+String.valueOf(Year));
		sb.append(",Make="+Make);
		sb.append(",Model="+Model);
		sb.append(",Kilometres="+Kilometres);
		sb.append(",Body_Type="+Body_Type);
		sb.append(",Engine="+Engine);
		sb.append(",_Transmission="+_Transmission);
		sb.append(",Drivetrain="+Drivetrain);
		sb.append(",_Exterior_Colour="+_Exterior_Colour);
		sb.append(",_Interior_Colour="+_Interior_Colour);
		sb.append(",_Passengers="+String.valueOf(_Passengers));
		sb.append(",Doors="+Doors);
		sb.append(",_Fuel_Type="+_Fuel_Type);
		sb.append(",City="+City);
		sb.append(",_Highway="+_Highway);
		sb.append(",price="+String.valueOf(price));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT * FROM \"Data1\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.id = 0;
							} else {
		                          
            row2.id = rs_tDBInput_2.getFloat(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.Year = null;
							} else {
		                          
            row2.Year = rs_tDBInput_2.getFloat(2);
            if(rs_tDBInput_2.wasNull()){
                    row2.Year = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.Make = null;
							} else {
	                         		
        	row2.Make = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.Model = null;
							} else {
	                         		
        	row2.Model = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.Kilometres = null;
							} else {
	                         		
        	row2.Kilometres = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.Body_Type = null;
							} else {
	                         		
        	row2.Body_Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.Engine = null;
							} else {
	                         		
        	row2.Engine = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2._Transmission = null;
							} else {
	                         		
        	row2._Transmission = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.Drivetrain = null;
							} else {
	                         		
        	row2.Drivetrain = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2._Exterior_Colour = null;
							} else {
	                         		
        	row2._Exterior_Colour = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2._Interior_Colour = null;
							} else {
	                         		
        	row2._Interior_Colour = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2._Passengers = null;
							} else {
		                          
            row2._Passengers = rs_tDBInput_2.getFloat(12);
            if(rs_tDBInput_2.wasNull()){
                    row2._Passengers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.Doors = null;
							} else {
	                         		
        	row2.Doors = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2._Fuel_Type = null;
							} else {
	                         		
        	row2._Fuel_Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.City = null;
							} else {
	                         		
        	row2.City = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2._Highway = null;
							} else {
	                         		
        	row2._Highway = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.price = null;
							} else {
		                          
            row2.price = rs_tDBInput_2.getFloat(17);
            if(rs_tDBInput_2.wasNull()){
                    row2.price = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.Year = row2.Year;
				
				row2_HashRow.Make = row2.Make;
				
				row2_HashRow.Model = row2.Model;
				
				row2_HashRow.Kilometres = row2.Kilometres;
				
				row2_HashRow.Body_Type = row2.Body_Type;
				
				row2_HashRow.Engine = row2.Engine;
				
				row2_HashRow._Transmission = row2._Transmission;
				
				row2_HashRow.Drivetrain = row2.Drivetrain;
				
				row2_HashRow._Exterior_Colour = row2._Exterior_Colour;
				
				row2_HashRow._Interior_Colour = row2._Interior_Colour;
				
				row2_HashRow._Passengers = row2._Passengers;
				
				row2_HashRow.Doors = row2.Doors;
				
				row2_HashRow._Fuel_Type = row2._Fuel_Type;
				
				row2_HashRow.City = row2.City;
				
				row2_HashRow._Highway = row2._Highway;
				
				row2_HashRow.price = row2.price;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final tUniqRow tUniqRowClass = new tUniqRow();

        int exitCode = tUniqRowClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = tUniqRow.class.getClassLoader().getResourceAsStream("test_etl/tuniqrow_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = tUniqRow.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : tUniqRow");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     176368 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 octobre 2023 à 21:08:34 GMT+01:00
 ************************************************************************************************/